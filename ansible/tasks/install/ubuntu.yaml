- name: Setting apt
  block:
    - name: Install apt packages
      become: true
      apt:
        name: "{{ item }}"
        update_cache: true
      loop:
        - neovim
        - git
        - wget
        - curl
        - pwgen
        - nodejs
        - npm
        - direnv
        - clang-{{ clang_version }}
        - clang-tools-{{ clang_version }}
        - clangd-{{ clang_version }}
        - chromium-browser
        - python3-pip
        - apt-transport-https
        - ca-certificates
        - gnupg-agent
        - software-properties-common
        - tree
        - ffmpeg
        - fzf
        - jq

    - name: Add docker apt-key
      become: true
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: define lsb_release -cs
      shell: lsb_release -cs
      ignore_errors: true
      register: lsb_release

    - name: add apt repository docker
      become: true
      apt_repository:
        update_cache: true
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ lsb_release.stdout }} stable"
        state: present

    - name: Install docker-ce.
      become: true
      apt:
        name: docker-ce
        state: present
        update_cache: true

    - name: alternatives
      become: true
      shell: "update-alternatives --install {{ item.link }} {{ item.name }} {{ item.path }} 50"
      with_items:
        - name: "clang"
          link: "/usr/bin/clang"
          path: "/usr/bin/clang-{{ clang_version }}"
        - name: "clangd"
          link: "/usr/bin/clangd"
          path: "/usr/bin/clangd-{{ clang_version }}"
  vars:
    clang_version: 10

- name: Ensure group "docker"
  group:
    name: docker
    state: present

- name: Add the current user to groups
  become: true
  shell: usermod -aG {{ item }} $USER
  with_items:
    - docker

- name: Install pip packages.
  pip:
    name: "{{ item }}"
    state: latest
  loop:
    - msgpack
    - pynvim

- stat:
    path: "{{ home }}/.anyenv"
  register: anyenv_is_installed

- name: Install anyenv
  git:
    repo: "https://github.com/riywo/anyenv"
    dest: "{{ home }}/.anyenv"

- stat:
    path: "{{ xdg_config_home }}/anyenv/anyenv-install"
  register: has_anyenv_install

- name: Init anyenv
  become: false
  shell: /bin/bash -lc "source {{ home }}/.profile && anyenv install --force-init"
  when: has_anyenv_install.stat.exists == false

- name: Install envs
  become: false
  shell: /bin/bash -lc "source {{ home }}/.profile && anyenv install -f {{ item }}"
  when: has_anyenv_install.stat.exists == false
  with_items:
    - goenv
    - nodenv
    - pyenv

- stat:
    path: "{{ home }}/.anyenv/envs/goenv/shims/go"
  register: installed_go

- name: Install go
  become: false
  shell: /bin/bash -lc "source {{ home }}/.profile && goenv install {{ version }} && goenv global {{ version }}"
  vars:
    version: 1.14.6
  when: installed_go.stat.exists == false

- name: Install go tools without -u
  become: false
  shell: "{{ home }}/.anyenv/envs/goenv/shims/go get {{ packages | join(' ') }}"
  vars:
    packages:
      - golang.org/x/tools/gopls@latest
  environment:
    GO111MODULE: "on"

- stat:
    path: "{{ home }}/google-cloud-sdk/"
  register: has_google_cloud_sdk
- name: Install google cloud sdk
  shell: "curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-{{ version }}-linux-x86_64.tar.gz | tar zx -C {{ home }}"
  vars:
    version: 298.0.0
  when: has_google_cloud_sdk.stat.exists == false

- name: Update google cloud sdk
  shell: "{{ home }}/google-cloud-sdk/bin/gcloud components update --quiet"
  when: has_google_cloud_sdk.stat.exists == false
