- name: update apt cache
  become: true
  apt:
    update_cache: true

- name: for add repository
  become: true
  apt:
    name: "{{ item }}"
  loop:
    - apt-transport-https
    - ca-certificates
    - gnupg-agent
    - software-properties-common

- name: add apt keys
  become: true
  apt_key:
    url: "{{ item }}"
    state: present
  loop: "{{ apt.add_keys }}"

- name: add apt keys from keyserver
  become: true
  apt_key:
    keyserver: "{{ item.keyserver }}"
    id: "{{ item.id }}"
  loop: "{{ apt.add_keys_from_keyserver }}"

- name: add apt repositories
  become: true
  shell: apt-add-repository "{{ item }}"
  loop: "{{ apt.add_repositories }}"

- name: update apt cache
  become: true
  apt:
    update_cache: true

- name: install apt apps
  become: true
  apt:
    name: "{{ item }}"
  loop: "{{ apt.install_apps }}"

- name: Install pip packages.
  pip:
    name: "{{ item }}"
  loop: "{{ pip.install_apps }}"

- name: add docker group
  become: true
  shell: groupadd docker
  failed_when: false

- name: get the username running the deploy
  become: false
  shell: whoami
  register: username_on_the_host
  changed_when: false

- name: gpasswd docker
  become: true
  shell: "gpasswd -a {{ username_on_the_host.stdout }} docker"

- name: check terraform-lsp
  shell: command -v terraform-lsp
  changed_when: false
  failed_when: false
  register: terraform_lsp

- name: install terraform-lsp
  block:
    - name: generate tmp name
      tempfile:
        state: directory
      register: terraform_lsp_tmp
    - name: unarchive
      unarchive:
        src: "{{ tf_src_url }}"
        dest: "{{ terraform_lsp_tmp.path }}"
        remote_src: true
    - name: mv
      shell: mv "{{ terraform_lsp_tmp.path }}/terraform-lsp" "{{ home }}/.local/bin"
  when: terraform_lsp.stdout == ""
